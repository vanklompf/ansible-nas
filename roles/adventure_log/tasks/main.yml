---
- name: Start Adventure Log
  block:
    - name: Create Adventure Log Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ adventure_log_data_directory }}"
        - "{{ adventure_log_data_directory }}/media"
        - "{{ adventure_log_data_directory }}/proxy"

    - name: Create Adventure Log network
      community.docker.docker_network:
        name: "{{ adventure_log_network_name }}"

    - name: Create Adventure Log Db Docker Container
      community.docker.docker_container:
        name: "{{ adventure_log_db_container_name }}"
        image: "{{ adventure_log_db_image_name }}:{{ adventure_log_db_image_version }}"
        pull: true
        volumes:
          - "{{ adventure_log_data_directory }}/postgres:/var/lib/postgresql/data:rw"
        networks:
          - name: "{{ adventure_log_network_name }}"
        network_mode: "{{ adventure_log_network_name }}"
        container_default_behavior: no_defaults
        env: "{{ adventure_log_db_env }}"
        labels:
          traefik.enable: "false"
        restart_policy: always
        memory: "{{ adventure_log_db_memory }}"

    - name: Create Adventure Log Server Docker Container
      community.docker.docker_container:
        name: "{{ adventure_log_server_container_name }}"
        image: "{{ adventure_log_server_image_name }}:{{ adventure_log_server_image_version }}"
        pull: true
        # ports:
        #   - "{{ adventure_log_port }}:8501"
        env: "{{ adventure_log_server_env }}"
        volumes:
          - "{{ adventure_log_data_directory }}/media:/code/media/"
        networks:
          - name: "{{ adventure_log_network_name }}"
        network_mode: "{{ adventure_log_network_name }}"
        container_default_behavior: no_defaults
        labels:
          traefik.enable: "false"
        restart_policy: always
        memory: "{{ adventure_log_server_memory }}"

    - name: Create Adventure Log Web Docker Container
      community.docker.docker_container:
        name: "{{ adventure_log_web_container_name }}"
        image: "{{ adventure_log_web_image_name }}:{{ adventure_log_web_image_version }}"
        pull: true
        ports:
          - "{{ adventure_log_web_port }}:3000"
        networks:
          - name: "{{ adventure_log_network_name }}"
        network_mode: "{{ adventure_log_network_name }}"
        container_default_behavior: no_defaults
        env: "{{ adventure_log_web_env }}"
        labels:
          traefik.enable: "{{ adventure_log_available_externally | string }}"
          traefik.http.routers.adventure_log.rule: "Host(`{{ adventure_log_hostname }}.{{ ansible_nas_domain }}`) && !PathPrefix(`/media`)"
          traefik.http.routers.adventure_log.tls.certresolver: "letsencrypt"
          traefik.http.routers.adventure_log.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.adventure_log.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.adventure_log.loadbalancer.server.port: "3000"
        memory: "{{ adventure_log_web_memory }}"

    - name: Create Adventure Log Nginx Container
      community.docker.docker_container:
        name: "{{ adventure_log_nginx_container_name }}"
        image: "{{ adventure_log_nginx_image_name }}:{{ adventure_log_nginx_image_version }}"
        pull: true
        ports:
          - "{{ adventure_log_port }}:80"
        volumes:
          - "{{ adventure_log_data_directory }}/media:/usr/share/nginx/html"
        networks:
          - name: "{{ adventure_log_network_name }}"
        network_mode: "{{ adventure_log_network_name }}"
        container_default_behavior: no_defaults
        labels:
          traefik.enable: "{{ adventure_log_available_externally | string }}"
          traefik.http.routers.adventure_log_nginx.rule: "Host(`{{ adventure_log_hostname }}.{{ ansible_nas_domain }}`) && PathPrefix(`/media`)"
          traefik.http.routers.adventure_log_nginx.tls.certresolver: "letsencrypt"
          traefik.http.routers.adventure_log_nginx.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.adventure_log_nginx.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.middlewares.adventure_log_nginx-stripprefix.stripprefix.prefixes: "/media"
          traefik.http.routers.adventure_log_nginx.middlewares: "adventure_log_nginx-stripprefix"
          traefik.http.services.adventure_log_nginx.loadbalancer.server.port: "80"
        restart_policy: always
        memory: "{{ adventure_log_nginx_memory }}"

  when: adventure_log_enabled is true

- name: Stop Adventure Log
  block:
    - name: Stop Adventure Log Server
      community.docker.docker_container:
        name: "{{ adventure_log_server_container_name }}"
        state: absent

    - name: Stop Adventure Log Web
      community.docker.docker_container:
        name: "{{ adventure_log_web_container_name }}"
        state: absent

    - name: Stop Adventure Log Db
      community.docker.docker_container:
        name: "{{ adventure_log_db_container_name }}"
        state: absent

    - name: Stop Adventure Log Nginx
      community.docker.docker_container:
        name: "{{ adventure_log_nginx_container_name }}"
        state: absent
  when: adventure_log_enabled is false
