---
- name: Start Firefly
  block:
    - name: Create Firefly III Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ firefly_data_directory }}/mariadb"
        - "{{ firefly_data_directory }}/upload"
        - "{{ firefly_data_directory }}/export"

    - name: Create Firefly network
      community.docker.docker_network:
        name: "{{ firefly_network_name }}"

    - name: Create MySQL container for Firefly
      community.docker.docker_container:
        name: "{{ firefly_mysql_container_name }}"
        image: "{{ firefly_mysql_image_name }}:{{ firefly_mysql_image_tag }}"
        networks:
          - name: "{{ firefly_network_name }}"
        network_mode: "{{ firefly_network_name }}"
        pull: true
        volumes:
          - "{{ firefly_data_directory }}/mariadb:/var/lib/mysql:rw"
        env:
          MYSQL_DATABASE: "{{ firefly_mysql_database }}"
          MYSQL_USER: "{{ firefly_mysql_user }}"
          MYSQL_PASSWORD: "{{ firefly_mysql_password }}"
          MYSQL_ROOT_PASSWORD: "{{ firefly_mysql_root_password }}"
        restart_policy: unless-stopped
        memory: "{{ firefly_mysql_memory }}"
        labels:
          traefik.enable: "false"

    - name: Wait for MySQL to init
      ansible.builtin.pause:
        seconds: 30

    - name: Create Firefly III container
      community.docker.docker_container:
        name: "{{ firefly_container_name }}"
        image: "{{ firefly_image_name }}:{{ firefly_image_tag }}"
        networks:
          - name: "{{ firefly_network_name }}"
        network_mode: "{{ firefly_network_name }}"
        pull: true
        volumes:
          - "{{ firefly_data_directory }}/export:/var/www/firefly-iii/storage/export:rw"
          - "{{ firefly_data_directory }}/upload:/var/www/firefly-iii/storage/upload:rw"
        ports:
          - "{{ firefly_port }}:8080"
        env: "{{ firefly_optional_env | default({}) | combine(firefly_env) }}"
        restart_policy: unless-stopped
        memory: "{{ firefly_memory }}"
        labels:
          traefik.enable: "{{ firefly_available_externally | string }}"
          traefik.http.routers.firefly.rule: "Host(`{{ firefly_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.firefly.tls.certresolver: "letsencrypt"
          traefik.http.routers.firefly.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.firefly.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.firefly.loadbalancer.server.port: "8080"

    - name: Create Firefly III Data Importer container
      community.docker.docker_container:
        name: "{{ firefly_importer_container_name }}"
        image: "{{ firefly_importer_image_name }}:{{ firefly_importer_image_tag }}"
        networks:
          - name: "{{ firefly_network_name }}"
        network_mode: "{{ firefly_network_name }}"
        pull: true
        volumes:
          - "{{ firefly_data_directory }}/export:/var/www/firefly-iii/storage/export:rw"
          - "{{ firefly_data_directory }}/upload:/var/www/firefly-iii/storage/upload:rw"
        ports:
          - "{{ firefly_importer_port }}:8080"
        env: "{{ firefly_optional_env | default({}) | combine(firefly_env) | combine(firefly_importer_env) }}"
        restart_policy: unless-stopped
        memory: "{{ firefly_importer_memory }}"
        labels:
          traefik.enable: "{{ firefly_available_externally | string }}"
          traefik.http.routers.firefly-importer.rule: "Host(`{{ firefly_importer_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.firefly-importer.tls.certresolver: "letsencrypt"
          traefik.http.routers.firefly-importer.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.firefly-importer.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.firefly-importer.loadbalancer.server.port: "8080"
      when: firefly_importer_enabled is true

    - name: Install Firefly Pico
      block:
        - name: Create Firefly III Pico Db container
          community.docker.docker_container:
            name: "{{ firefly_pico_db_container_name }}"
            image: "{{ firefly_pico_db_image_name }}:{{ firefly_pico_db_image_tag }}"
            networks:
              - name: "{{ firefly_network_name }}"
            network_mode: "{{ firefly_network_name }}"
            pull: true
            volumes:
              - "{{ firefly_data_directory }}/pico-db:/var/lib/postgresql/data:rw"
            env:
              POSTGRES_DB: "{{ firefly_pico_db_database }}"
              POSTGRES_USER: "{{ firefly_pico_db_user }}"
              POSTGRES_PASSWORD: "{{ firefly_pico_db_password }}"
            restart_policy: unless-stopped
            memory: "{{ firefly_pico_db_memory }}"
            labels:
              traefik.enable: "false"

        - name: Create Firefly III Pico container
          community.docker.docker_container:
            name: "{{ firefly_pico_container_name }}"
            image: "{{ firefly_pico_image_name }}:{{ firefly_pico_image_tag }}"
            networks:
              - name: "{{ firefly_network_name }}"
            network_mode: "{{ firefly_network_name }}"
            pull: true
            ports:
              - "{{ firefly_pico_port }}:80"
            env: "{{ firefly_pico_optional_env | default({}) | combine(firefly_pico_env) }}"
            restart_policy: unless-stopped
            memory: "{{ firefly_pico_memory }}"
            labels:
              traefik.enable: "{{ firefly_available_externally | string }}"
              traefik.http.routers.firefly-pico.rule: "Host(`{{ firefly_pico_hostname }}.{{ ansible_nas_domain }}`)"
              traefik.http.routers.firefly-pico.tls.certresolver: "letsencrypt"
              traefik.http.routers.firefly-pico.tls.domains[0].main: "{{ ansible_nas_domain }}"
              traefik.http.routers.firefly-pico.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
              traefik.http.services.firefly-pico.loadbalancer.server.port: "80"
      when: firefly_pico_enabled is true
  when: firefly_enabled is true

- name: Stop Firefly
  block:
    - name: Stop Firefly
      community.docker.docker_container:
        name: "{{ firefly_container_name }}"
        state: absent

    - name: Stop Firefly MySQL
      community.docker.docker_container:
        name: "{{ firefly_mysql_container_name }}"
        state: absent

    - name: Stop Firefly Data Importer
      community.docker.docker_container:
        name: "{{ firefly_importer_container_name }}"
        state: absent

    - name: Stop Firefly Pico Db
      community.docker.docker_container:
        name: "{{ firefly_pico_db_container_name }}"
        state: absent

    - name: Stop Firefly Pico
      community.docker.docker_container:
        name: "{{ firefly_pico_container_name }}"
        state: absent
  when: firefly_enabled is false
