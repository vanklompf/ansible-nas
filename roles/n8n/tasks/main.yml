---
- name: Start n8n
  block:
    - name: Create n8n Directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: 1000
        group: 1000
      with_items:
        - "{{ n8n_data_directory }}"

    - name: Create n8n network
      community.docker.docker_network:
        name: "{{ n8n_network_name }}"

    - name: Create n8n Postgres Docker Container
      community.docker.docker_container:
        name: "{{ n8n_postgres_container_name }}"
        image: "{{ n8n_postgres_image_name }}:{{ n8n_postgres_image_version }}"
        pull: true
        volumes:
          - "{{ n8n_data_directory }}/postgres:/var/lib/postgresql/data:rw"
        networks:
          - name: "{{ n8n_network_name }}"
        network_mode: "{{ n8n_network_name }}"
        restart_policy: unless-stopped
        memory: "{{ n8n_postgres_memory }}"
        env: "{{ n8n_postgres_env }}"
        labels:
          traefik.enable: "false"

    - name: Create n8n Docker Container
      community.docker.docker_container:
        name: "{{ n8n_container_name }}"
        image: "{{ n8n_image_name }}:{{ n8n_image_version }}"
        pull: true
        ports:
          - "{{ n8n_port }}:5678"
        volumes:
          - "{{ n8n_data_directory }}/data:/home/node/.n8n:rw"
          - "{{ n8n_data_directory }}/local-files:/files:rw"
          - "/etc/timezone:/etc/timezone:ro"
        networks:
          - name: "{{ n8n_network_name }}"
        network_mode: "{{ n8n_network_name }}"
        restart_policy: unless-stopped
        memory: "{{ n8n_memory }}"
        env: "{{ n8n_env }}"
        labels:
          traefik.enable: "{{ n8n_available_externally | string }}"
          traefik.http.routers.n8n.rule: "Host(`{{ n8n_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.n8n.tls.certresolver: "letsencrypt"
          traefik.http.routers.n8n.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.n8n.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.n8n.loadbalancer.server.port: "5678"
  when: n8n_enabled is true

- name: Stop n8n
  block:
    - name: Stop n8n
      community.docker.docker_container:
        name: "{{ n8n_container_name }}"
        state: absent
    - name: Stop n8n Postgres
      community.docker.docker_container:
        name: "{{ n8n_postgres_container_name }}"
        state: absent
  when: n8n_enabled is false
