---
- name: Start Photostructure
  block:
    - name: Create Photostructure Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ photostructure_user_id }}"
        group: "{{ photostructure_group_id }}"
        mode: 0777
      with_items:
        - "{{ photostructure_data_directory }}"
        - "{{ photostructure_data_directory }}/library"
        - "{{ photostructure_data_directory }}/config"
        - "{{ photostructure_data_directory }}/logs"
        - "{{ photostructure_data_directory }}/tmp"

    - name: Create Photostructure Docker Container
      community.docker.docker_container:
        container_default_behavior: no_defaults
        name: "{{ photostructure_container_name }}"
        image: "{{ photostructure_image_name }}:{{ photostructure_image_version }}"
        pull: true
        stop_timeout: 120
        volumes: "{{ photostructure_volumes + photostructure_optional_volumes | default([]) }}"
        ports:
          - "{{ photostructure_http_port }}:1787"
        user: "1000:1000"
        env:
          TZ: "{{ ansible_nas_timezone }}"
          UID: "{{ photostructure_user_id }}"
          GID: "{{ photostructure_group_id }}"
          PS_HTTP_PORT: "{{ photostructure_http_port }}"
        restart_policy: unless-stopped
        memory: "{{ photostructure_memory }}"
        labels:
          traefik.enable: "{{ photostructure_available_externally | string }}"
          traefik.http.routers.photostructure.rule: "Host(`{{ photostructure_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.photostructure.tls.certresolver: "letsencrypt"
          traefik.http.routers.photostructure.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.photostructure.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.photostructure.loadbalancer.server.port: "1787"
  when: photostructure_enabled is true

- name: Stop Photostructure
  block:
    - name: Stop Photostructure
      community.docker.docker_container:
        name: "{{ photostructure_container_name }}"
        state: absent
  when: photostructure_enabled is false
